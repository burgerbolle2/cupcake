-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.bottom
(
    bottom_id serial NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    price numeric(10, 2) NOT NULL,
    CONSTRAINT bottom_pkey PRIMARY KEY (bottom_id)
    );

CREATE TABLE IF NOT EXISTS public.cupcake
(
    cupcake_id serial NOT NULL,
    top_id integer,
    bottom_id integer,
    price numeric(10, 2) NOT NULL,
    CONSTRAINT cupcake_pkey PRIMARY KEY (cupcake_id)
    );

CREATE TABLE IF NOT EXISTS public.order_line
(
    order_line_id serial NOT NULL,
    orders_id integer,
    cupcake_id integer,
    quantity integer NOT NULL,
    line_price numeric(10, 2) NOT NULL,
    CONSTRAINT order_line_pkey PRIMARY KEY (order_line_id)
    );

CREATE TABLE IF NOT EXISTS public.orders
(
    orders_id serial NOT NULL,
    users_id integer,
    orders_date timestamp without time zone DEFAULT now(),
    total_price numeric(10, 2),
    is_completed boolean DEFAULT false,
    CONSTRAINT orders_pkey PRIMARY KEY (orders_id)
    );

CREATE TABLE IF NOT EXISTS public.payments
(
    payments_id serial NOT NULL,
    users_id integer,
    amount numeric(10, 2) NOT NULL,
    payment_date timestamp without time zone DEFAULT now(),
    CONSTRAINT payments_pkey PRIMARY KEY (payments_id)
    );

CREATE TABLE IF NOT EXISTS public.top
(
    top_id serial NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    price numeric(10, 2) NOT NULL,
    CONSTRAINT top_pkey PRIMARY KEY (top_id)
    );

CREATE TABLE IF NOT EXISTS public.users
(
    users_id serial NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    role character varying COLLATE pg_catalog."default" NOT NULL,
    balance numeric(10, 2) NOT NULL DEFAULT 100,
    CONSTRAINT users_pkey PRIMARY KEY (users_id),
    CONSTRAINT unique_email UNIQUE (email)
    );

ALTER TABLE IF EXISTS public.cupcake
    ADD CONSTRAINT cupcake_bottom_id_fkey FOREIGN KEY (bottom_id)
    REFERENCES public.bottom (bottom_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.cupcake
    ADD CONSTRAINT cupcake_top_id_fkey FOREIGN KEY (top_id)
    REFERENCES public.top (top_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_line
    ADD CONSTRAINT order_line_cupcake_id_fkey FOREIGN KEY (cupcake_id)
    REFERENCES public.cupcake (cupcake_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_line
    ADD CONSTRAINT order_line_orders_id_fkey FOREIGN KEY (orders_id)
    REFERENCES public.orders (orders_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT orders_users_id_fkey FOREIGN KEY (users_id)
    REFERENCES public.users (users_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT payments_users_id_fkey FOREIGN KEY (users_id)
    REFERENCES public.users (users_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;

END;